<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <!-- jquery CDN -->
    <script
      src="https://code.jquery.com/jquery-3.7.1.min.js"
      integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo="
      crossorigin="anonymous"
    ></script>
    <!-- googlrFont -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@100..900&display=swap"
      rel="stylesheet"
    />
    <!-- css -->
    <link rel="stylesheet" href="/static/css/users.css" />
    <title>회원 정보</title>
  </head>
  <body>
    <header>
      <a href="#" onClick="history.back()" class="mobile">
        <img src="/static/img/icons/Arrow - Left.png" alt="arrow" />
      </a>
      <p class="logo mobile">내정보</p>
      <!-- 웹 -->
      <a href="/" class="web logoA">
        <img src="/static/img/logo/b_logo.png" alt="logo" class="logoImg" />
        <span>오늘은 뭐 먹지?</span>
      </a>
      <div class="menu web">
        <% if(!true){ %>
        <a href="/users">내정보</a>
        <a href="/users/logout">로그아웃</a>
        <%}else{%>
        <a href="/users/login">로그인</a>
        <a href="/users/register">회원가입</a>
        <%} %>
      </div>
    </header>
    <main>
      <div class="con">
        <div class="userBox">
          <!-- 프로필 박스1 -->
          <div class="userBox1">
            <div class="userPic">
              <img src="/static/img/demo/pro.png" alt="profileimage" />
            </div>
            <div class="userP">
              <p class="userId">userID</p>
              <p class="userName">name</p>
            </div>
          </div>

          <!-- 프로필박스2 -->
          <div class="userBox2">
            <div class="box2">
              <span>정보수정</span>
              <a href="/users/edit">
                <img
                  src="/static/img/icons/arrow_right2.png"
                  alt="정보수정"
                  class="box2img"
                />
              </a>
            </div>
            <div class="box2">
              <span>즐겨찾기</span>
              <a href="/favorites">
                <img
                  src="/static/img/icons/arrow_right2.png"
                  alt="즐겨찾기"
                  class="box2img"
                />
              </a>
            </div>
            <div class="box2">
              <span>로그아웃</span>
              <a href="/users/logout">
                <img
                  src="/static/img/icons/arrow_right2.png"
                  alt="로그아웃"
                  class="box2img"
                />
              </a>
            </div>
            <div class="box2">
              <span>회원탈퇴</span>
              <!-- 탈퇴는 온 클릭-->
              <img
                src="/static/img/icons/arrow_right2.png"
                alt="회원탈퇴"
                class="box2img"
                onclick="confirmClick()"
              />
            </div>
          </div>
        </div>
      </div>
    </main>
    <div class="mManu">
      <div class="Menu">
        <div class="menu">
          <a href="/">
            <img src="/static/img/icons/Home.png" alt="홈" />
          </a>
        </div>
        <div class="menu">
          <a href="/favorites">
            <img src="/static/img/icons/Heart.png" alt="즐겨찾기" />
          </a>
        </div>
        <div class="menu">
          <a href="/users">
            <img src="/static/img/icons/Profile.png" alt="프로필" />
          </a>
        </div>
      </div>
    </div>
    <footer class="web">
      <p>Copyright 2024. Team 2TheCode All rights reserved.</p>
    </footer>
  </body>
  <script>
    // 회원 탈퇴 함수
    function confirmClick() {
      if (confirm("회원을 탈퇴하시겠습니까?")) {
        const token = localStorage.getItem("authToken"); // 로컬스토리지에서 토큰 가져오기

        if (!token) {
          alert("로그인이 필요합니다.");
          return;
        }

        // Ajax 요청으로 회원 탈퇴 API 호출
        $.ajax({
          type: "DELETE",
          url: "/users/delete", // 회원 탈퇴 컨트롤러 라우트 URL
          headers: {
            Authorization: `Bearer ${token}`, // 토큰 포함
          },
          success: function (res) {
            if (res.success) {
              alert("회원 탈퇴가 완료되었습니다.");
              localStorage.removeItem("authToken"); // 토큰 삭제
              window.location.href = "/"; // 홈으로 리다이렉트
            } else {
              alert("회원 탈퇴 중 오류가 발생했습니다.");
            }
          },
          error: function (err) {
            console.error("회원 탈퇴 오류:", err);
            alert("서버 오류가 발생했습니다. 다시 시도해주세요.");
          },
        });
      }
    }

    // 사용자 정보 표시
    $(document).ready(function () {
      const token = localStorage.getItem("authToken"); // 토큰 가져오기

      if (!token) {
        alert("로그인이 필요합니다.");
        return;
      }

      // 서버에 유저 정보 요청
      $.ajax({
        type: "GET",
        url: "/users/details",
        headers: {
          Authorization: `Bearer ${token}`, // JWT 토큰을 Authorization 헤더에 추가
        },
        success: function (res) {
          if (res.success) {
            document.querySelector(".userId").innerText = res.user.userId;
            document.querySelector(".userName").innerText = res.user.name;
          } else {
            alert("유저 정보를 불러올 수 없습니다. 다시 로그인해주세요.");
          }
        },
        error: function (err) {
          console.error("Error fetching user details:", err);
          alert("서버 오류 발생. 다시 시도해주세요");
        },
      });
    });
  </script>
</html>

<!-- 

회원 탈퇴 기능 추가:
confirmClick() 함수에서 Ajax를 통해 DELETE /users/delete 엔드포인트 호출.
요청 헤더에 JWT 토큰을 포함하여 인증.
성공 시, 로컬스토리지의 토큰 삭제 및 홈 화면으로 리다이렉트.
회원 정보 요청:
기존과 동일하게 Ajax를 사용하여 사용자 정보를 표시.
이 코드는 서버의 exports.deleteUser 컨트롤러를 호출하여 회원 정보를 삭제하고 로그아웃을 처리합니다.


-->
<!-- register / users axios   추가하기-->
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>
  //아이디 중복 확인 (idCheck 함수 수정)
  function idCheck() {
    const form = document.forms["register"];
    const inputId = form.userId.value.trim();
    const idP = document.querySelector(".idP");

    // 아이디 유효성 검사
    const reg = /^(?=.*[a-z])(?=.*\d)[A-Za-z\d]{5,12}$/; // 정규식
    const isChecked = reg.test(inputId);

    if (inputId === "") {
      idP.innerText = "아이디를 입력해주세요";
      idP.style.color = "red";
      return false;
    }

    if (!isChecked) {
      idP.innerText = "아이디는 영문 소문자, 숫자를 포함한 5 ~ 12여야 합니다.";
      idP.style.color = "red";
      return false;
    } else {
      idP.innerText = "영문 소문자, 숫자를 포함한 5 ~ 12자리";
      idP.style.color = "rgba(160, 160, 160, 1)";
    }

    // 중복 아이디 체크
    axios
      .post("/users/registerIdCheck", { userId: inputId })
      .then((response) => {
        if (response.data.success) {
          idP.innerText = "사용 가능한 아이디입니다.";
          idP.style.color = "rgba(160, 160, 160, 1)"; // 원래 색으로
          isIdCheck = true; // 아이디가 중복 확인
          console.log("아이디 중복 확인");
        } else {
          idP.innerText = "이미 사용 중인 아이디입니다.";
          idP.style.color = "red";
          console.log("아이디 중복 체크 실패");
        }
      })
      .catch((error) => {
        console.error(error);
      });
  }

  //회원가입 (registerClick 함수 수정)
  function registerClick() {
    const form = document.forms["register"];
    const userId = form.userId.value.trim();
    const userPw1 = form.userPw1.value;
    const userPw2 = form.userPw2.value;
    const userName = form.userName.value.trim();
    const userBirth = form.userBirth.value;

    // 아이디 중복 확인
    if (!isIdCheck) {
      alert("아이디 중복 확인을 해주세요");
      return false;
    }

    // 모든 항목 검사
    if (
      userId === "" ||
      userPw1 === "" ||
      userPw2 === "" ||
      userName === "" ||
      userBirth === ""
    ) {
      alert("모든 항목을 입력해주세요");
      return false;
    }

    // 비밀번호 유효성
    const regPw =
      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$])[A-Za-z\d!@#$]{5,15}$/;
    const isCheckedPw = regPw.test(userPw1);

    if (!isCheckedPw) {
      alert("비밀번호는 영문 소/대문자, 숫자, !@#$ 포함 5 ~ 15자여야 합니다.");
      return false;
    }

    // 비밀번호 확인
    if (userPw1 !== userPw2) {
      alert("비밀번호가 일치하지 않습니다.");
      return false;
    }

    // 폼 전송
    axios
      .post("/users/register", {
        userId: userId,
        userPw: userPw1,
        userName: userName,
        userBirth: userBirth,
      })
      .then((response) => {
        if (response.data.success) {
          // 성공 시 로그인 페이지로 이동
          document.location.href = "/users/login";
        } else {
          alert("회원가입 실패했습니다.");
        }
      })
      .catch((error) => {
        console.error(error);
      });
  }
</script>
