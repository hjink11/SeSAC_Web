<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>동적폼 (Ajax, axios, Fetch)</title>
    <!-- jquery CDN -->
    <script
      src="https://code.jquery.com/jquery-3.7.1.min.js"
      integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo="
      crossorigin="anonymous"
    ></script>
    <!-- axios CDN -->
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
    <style>
      .result {
        font-size: 24px;
        font-weight: 700;
      }
    </style>
  </head>
  <body>
    <h1>동적폼 전송 연습하기!</h1>
    <!-- 프론트! -->
    <form name="register">
      <label for="name">이름:</label>
      <input type="text" name="name" id="name" required />
      <br />
      <span>성별</span>
      <!-- 둘 중 하나는 선택 하라고 하나에만 required  -->
      <input type="radio" name="gender" id="male" value="남성" required />
      <label for="male">남자</label>

      <input type="radio" name="gender" id="female" value="여성" />
      <label for="female">여자</label>
      <br /><br />

      <button type="button" onclick="ajaxGet()">Ajax GET 제출</button>
      <button type="button" onclick="ajaxPost()">Ajax POST 제출</button>
      <br />
      <button type="button" onclick="axiosGet()">axios GET 제출</button>
      <button type="button" onclick="axiosPost()">axios POST 제출</button>
      <br />
      <button type="button" onclick="fetchGet()">fetch GET 제출</button>
      <button type="button" onclick="fetchPost()">fetch POST 제출</button>
    </form>
    <div class="result"></div>
    <hr />
    <a href="/api">외부 api 사용 </a>
    <hr />
    <a href="/practice1">실습1</a>
    <hr />
    <a href="/practice2">실습2</a>

    <script>
      const resultBox = document.querySelector(".result");
      function ajaxGet() {
        const form = document.forms["register"]; // 폼 선택 폼 이름이 register

        // console.log(form);
        // console.log(form.name);
        // console.log(form.gender);
        // console.log(form.gender.length); //2
        // console.log(form.gender.value); //"", 남성, 여성

        //button type button 은 required 동작하지 않음 !
        //유효성 검증 따로 하기
        if (form.name.value.trim() === "") {
          alert("이름을 입력해주세요");
          return; //밑에 나머지 작동 안되도록 return
        }

        if (form.gender.value === "") {
          alert("성별을 선택해주세요");
          return;
        }

        //ajax 요청
        //보낼 데이터 객체형태로 만들기
        const data = {
          name: form.name.value, // 이름
          gender: form.gender.value, // 여성 or 남성
        };

        // ajax 사용
        $.ajax({
          type: "get", // 어떤 메소드인지 get , post, delete 등
          url: "/ajax", //폼의 action에 해당
          data: data, // 서버로 넘겨줄 데이터 위에서 만든 const data

          //통신 성공
          success: function (res) {
            //통신 이후에 일어날들 ..
            console.log(res);
            resultBox.textContent = `GET / ajax 요청 완료 ${res.name}의 성별은 ${res.gender}`;
          },
          //통신 실패
          error: function (err) {
            console.log("err", err);
          },
        });
      }

      function ajaxPost() {
        const form = document.forms["register"];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        $.ajax({
          type: "post",
          url: "/ajax",
          data: data,
          //밑에 데이터는 다른 데이터임
          success: function (data) {
            console.log(data);
            resultBox.textContent = `POST/ ajax 요청 완료! ${data.name}의 성별은 ${data.gender}`;
          },
          error: function (error) {
            console.log(error);
          },
        });
      }

      //axios ! async로 쓴거라서 앞에 aync
      async function axiosGet() {
        const form = document.forms["register"];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        // 유효성 검사 - checkValidity()
        // required가 있으면 기입이 되었는지 안되었는지 검사해줌
        /*
         - required 속성이 없는 항목 > 무조건 true 반환
         - required 속성이 있는 항목 >
             - 기입을 했다면 true
             - 기입을 하지 않았다면 false
         */
        console.log(form.name.checkValidity()); // input[name="name"]
        console.log(form.gender[0].checkValidity()); // input[name="name"]

        if (!form.name.checkValidity()) {
          resultBox.innerText = "이름을 입력해주세요..";
          //   resultBox.innerText = form.name.validationMessage;
          // 이 입력란을 작성하세요.
          return;
        }

        if (!form.gender[0].checkValidity()) {
          resultBox.innerText = "성별을 입력해주세요..";
          //   resultBox.innerText = form.gender[0].validationMessage;
          // 다음 옵션 중 하나를 선택하세요.

          return;
        }

        // ----- axios 요청 보내기 -----

        // 주석은 then ~catch 사용
        //   axios({
        //     method: "get",
        //     url: "/axios",
        //     params: data, // get 요청일 때는 params에 담아서 요청
        //   })
        //     .then(function (response) {
        //       // 통신에 성공했을 때
        //       console.log(response);
        //       // {name:'allie', gender:'여성'} 그대로 뜨지 않음
        //       console.log("--------");
        //       console.log(response.data); // 서버에서 준 데이터
        //       // console.log(response.status);
        //       // console.log(response.statusText);
        //       // console.log(response.headers);
        //       // console.log(response.config);
        //       resultBox.textContent = `GET /axios 요청 완료!
        //     ${response.data.name}의 성별은 ${response.data.gender}`;
        //       resultBox.style.color = "green";
        //     })
        //     .catch(function (err) {
        //       // 통신에 실패했을 때
        //       console.error("error!!!!!!!!!");
        //       console.error(err);
        //     });
        // }  이거는 지원
        //2. async ~ await 사용
        //에러 처리를 try catch문으로 사용해서 해주는게 좋다.
        try {
          const response = await axios({
            method: "get",
            url: `/axios?name=${data.name}&gender=${data.gender}`,
          });
          console.log(response);
          console.log(response.data);
          const { name, gender } = response.data; //구조분해할당으로 밑에서 쓸수 있게
          resultBox.textContent = `${name}의 성별은 ${gender}`;
          resultBox.style.color = "green";
        } catch (err) {
          console.log(err);
        }
      }

      async function axiosPost() {
        const form = document.forms["register"];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        try {
          const res = await axios({
            method: "post",
            url: "/axios",
            data: data, // 키이름이data:위에서만든 data
          });
          console.log(res.data);
          console.log("실제데이터", res.data);
          const { name: 이름, gender: 성별 } = res.data;
          resultBox.textContent = `POST / axios 요청 완료!
          ${이름}의 성별은 ${성별}`;
          resultBox.style.color = "hotpink";
        } catch (err) {
          console.error(err);
        }
      }

      function fetchGet() {
        const form = document.forms["register"];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };
        //get이 디폴트라서 굳이 이렇게 안써도 됨
        // fetch("/fetch", {
        //   method: get,
        // });
        fetch(`fetch?name=${data.name}&gender=${data.gender}`)
          .then((response) => {
            console.log(response);
            //return response.text();
            //위에는 서버에서 넘어온 문자열을 뽑아내기 위해 메소드 사용 text() app.js에 send가
            //send가 텍스트일때임

            return response.json();
            //json(): resdonse 객체에서 오브젝트 본문을 뽑아내기 위해서 사용
          })
          .then((res) => {
            console.log(res);
            resultBox.textContent = `GET/ fetch 요청 완료! 
            ${res.name}의 성별은 ${res.gender} 입니다.`;
            resultBox.style.color = "limegreen";
          })
          .catch((err) => {
            console.error("err", err);
          });
      }

      async function fetchPost() {
        const form = document.forms["register"];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        try {
          const res = await fetch("/fetch", {
            method: "post",
            body: JSON.stringify(data), // body는 data를 JSON 형식으로 보내야함 (문자열인 JSON)
            headers: {
              "Content-Type": "application/json",
            },
          });
          console.log(res);
          //json() test( ) 는 시간이 걸리는 작업이다.
          const result = await res.json();
          console.log(result);

          const { name, gender } = result;
          resultBox.textContent = `POST/ fetch 요청 결과 ${name}의 성별은 ${gender}`;
          resultBox.style.color = "gray";
        } catch (err) {
          console.error(err);
        }
      }
    </script>
  </body>
</html>
